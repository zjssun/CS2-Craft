// source: econ.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.exportSymbol('proto.CEconItemPreviewDataBlock', null, global);
goog.exportSymbol('proto.CEconItemPreviewDataBlock.Sticker', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CEconItemPreviewDataBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CEconItemPreviewDataBlock.repeatedFields_, null);
};
goog.inherits(proto.CEconItemPreviewDataBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CEconItemPreviewDataBlock.displayName = 'proto.CEconItemPreviewDataBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CEconItemPreviewDataBlock.Sticker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CEconItemPreviewDataBlock.Sticker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CEconItemPreviewDataBlock.Sticker.displayName = 'proto.CEconItemPreviewDataBlock.Sticker';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CEconItemPreviewDataBlock.repeatedFields_ = [12,20];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CEconItemPreviewDataBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.CEconItemPreviewDataBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CEconItemPreviewDataBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CEconItemPreviewDataBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
accountid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
itemid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
defindex: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
paintindex: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
rarity: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
quality: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
paintwear: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
paintseed: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
killeaterscoretype: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
killeatervalue: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
customname: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
stickersList: jspb.Message.toObjectList(msg.getStickersList(),
    proto.CEconItemPreviewDataBlock.Sticker.toObject, includeInstance),
inventory: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
origin: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
questid: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
dropreason: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
musicindex: (f = jspb.Message.getField(msg, 17)) == null ? undefined : f,
entindex: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f,
petindex: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
keychainsList: jspb.Message.toObjectList(msg.getKeychainsList(),
    proto.CEconItemPreviewDataBlock.Sticker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CEconItemPreviewDataBlock}
 */
proto.CEconItemPreviewDataBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CEconItemPreviewDataBlock;
  return proto.CEconItemPreviewDataBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CEconItemPreviewDataBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CEconItemPreviewDataBlock}
 */
proto.CEconItemPreviewDataBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccountid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setItemid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDefindex(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPaintindex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRarity(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuality(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPaintwear(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPaintseed(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKilleaterscoretype(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKilleatervalue(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomname(value);
      break;
    case 12:
      var value = new proto.CEconItemPreviewDataBlock.Sticker;
      reader.readMessage(value,proto.CEconItemPreviewDataBlock.Sticker.deserializeBinaryFromReader);
      msg.addStickers(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInventory(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrigin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuestid(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDropreason(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMusicindex(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEntindex(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPetindex(value);
      break;
    case 20:
      var value = new proto.CEconItemPreviewDataBlock.Sticker;
      reader.readMessage(value,proto.CEconItemPreviewDataBlock.Sticker.deserializeBinaryFromReader);
      msg.addKeychains(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CEconItemPreviewDataBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CEconItemPreviewDataBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CEconItemPreviewDataBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CEconItemPreviewDataBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getStickersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.CEconItemPreviewDataBlock.Sticker.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getKeychainsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.CEconItemPreviewDataBlock.Sticker.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.toObject = function(opt_includeInstance) {
  return proto.CEconItemPreviewDataBlock.Sticker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CEconItemPreviewDataBlock.Sticker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CEconItemPreviewDataBlock.Sticker.toObject = function(includeInstance, msg) {
  var f, obj = {
slot: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
stickerId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
wear: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
scale: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
rotation: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
tintId: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
offsetX: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
offsetY: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
offsetZ: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
pattern: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
highlightReel: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker}
 */
proto.CEconItemPreviewDataBlock.Sticker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CEconItemPreviewDataBlock.Sticker;
  return proto.CEconItemPreviewDataBlock.Sticker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CEconItemPreviewDataBlock.Sticker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker}
 */
proto.CEconItemPreviewDataBlock.Sticker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStickerId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWear(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setScale(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotation(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTintId(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOffsetX(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOffsetY(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOffsetZ(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPattern(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHighlightReel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CEconItemPreviewDataBlock.Sticker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CEconItemPreviewDataBlock.Sticker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CEconItemPreviewDataBlock.Sticker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional uint32 slot = 1;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setSlot = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearSlot = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasSlot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 sticker_id = 2;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getStickerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setStickerId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearStickerId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasStickerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float wear = 3;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getWear = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setWear = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearWear = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasWear = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float scale = 4;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setScale = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearScale = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasScale = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float rotation = 5;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getRotation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setRotation = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearRotation = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 tint_id = 6;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getTintId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setTintId = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearTintId = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasTintId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float offset_x = 7;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getOffsetX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setOffsetX = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearOffsetX = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasOffsetX = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float offset_y = 8;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getOffsetY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setOffsetY = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearOffsetY = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasOffsetY = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float offset_z = 9;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getOffsetZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setOffsetZ = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearOffsetZ = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasOffsetZ = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 pattern = 10;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getPattern = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setPattern = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearPattern = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasPattern = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 highlight_reel = 11;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.getHighlightReel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.setHighlightReel = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock.Sticker} returns this
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.clearHighlightReel = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.Sticker.prototype.hasHighlightReel = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 accountid = 1;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getAccountid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setAccountid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearAccountid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasAccountid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 itemid = 2;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setItemid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearItemid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasItemid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 defindex = 3;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getDefindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setDefindex = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearDefindex = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasDefindex = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 paintindex = 4;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getPaintindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setPaintindex = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearPaintindex = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasPaintindex = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 rarity = 5;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getRarity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setRarity = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearRarity = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasRarity = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 quality = 6;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getQuality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setQuality = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearQuality = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasQuality = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 paintwear = 7;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getPaintwear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setPaintwear = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearPaintwear = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasPaintwear = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 paintseed = 8;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getPaintseed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setPaintseed = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearPaintseed = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasPaintseed = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 killeaterscoretype = 9;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getKilleaterscoretype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setKilleaterscoretype = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearKilleaterscoretype = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasKilleaterscoretype = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 killeatervalue = 10;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getKilleatervalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setKilleatervalue = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearKilleatervalue = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasKilleatervalue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string customname = 11;
 * @return {string}
 */
proto.CEconItemPreviewDataBlock.prototype.getCustomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setCustomname = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearCustomname = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasCustomname = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated Sticker stickers = 12;
 * @return {!Array<!proto.CEconItemPreviewDataBlock.Sticker>}
 */
proto.CEconItemPreviewDataBlock.prototype.getStickersList = function() {
  return /** @type{!Array<!proto.CEconItemPreviewDataBlock.Sticker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CEconItemPreviewDataBlock.Sticker, 12));
};


/**
 * @param {!Array<!proto.CEconItemPreviewDataBlock.Sticker>} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
*/
proto.CEconItemPreviewDataBlock.prototype.setStickersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.CEconItemPreviewDataBlock.Sticker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CEconItemPreviewDataBlock.Sticker}
 */
proto.CEconItemPreviewDataBlock.prototype.addStickers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.CEconItemPreviewDataBlock.Sticker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearStickersList = function() {
  return this.setStickersList([]);
};


/**
 * optional uint32 inventory = 13;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getInventory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setInventory = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearInventory = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasInventory = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 origin = 14;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getOrigin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setOrigin = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearOrigin = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 questid = 15;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getQuestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setQuestid = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearQuestid = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasQuestid = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional uint32 dropreason = 16;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getDropreason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setDropreason = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearDropreason = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasDropreason = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint32 musicindex = 17;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getMusicindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setMusicindex = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearMusicindex = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasMusicindex = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int32 entindex = 18;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getEntindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setEntindex = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearEntindex = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasEntindex = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional uint32 petindex = 19;
 * @return {number}
 */
proto.CEconItemPreviewDataBlock.prototype.getPetindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.setPetindex = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearPetindex = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CEconItemPreviewDataBlock.prototype.hasPetindex = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * repeated Sticker keychains = 20;
 * @return {!Array<!proto.CEconItemPreviewDataBlock.Sticker>}
 */
proto.CEconItemPreviewDataBlock.prototype.getKeychainsList = function() {
  return /** @type{!Array<!proto.CEconItemPreviewDataBlock.Sticker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CEconItemPreviewDataBlock.Sticker, 20));
};


/**
 * @param {!Array<!proto.CEconItemPreviewDataBlock.Sticker>} value
 * @return {!proto.CEconItemPreviewDataBlock} returns this
*/
proto.CEconItemPreviewDataBlock.prototype.setKeychainsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.CEconItemPreviewDataBlock.Sticker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CEconItemPreviewDataBlock.Sticker}
 */
proto.CEconItemPreviewDataBlock.prototype.addKeychains = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.CEconItemPreviewDataBlock.Sticker, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CEconItemPreviewDataBlock} returns this
 */
proto.CEconItemPreviewDataBlock.prototype.clearKeychainsList = function() {
  return this.setKeychainsList([]);
};


